---
- name: "linuxbrew:apt:install-dependencies"
  become: true
  apt:
    pkg:
      - "build-essential"
      - "sudo"
      - "procps"
      - "file"
      - "git"
      - "curl"
    update_cache: true
    cache_valid_time: "{{ apt_cache_valid_time | default(3600) }}"
    state: "{{ linuxbrew.state }}"

- name: "sudoers:lineinfile:/etc/sudoers.d/*:user-linuxbrew"
  become: true
  lineinfile:
    path: "/etc/sudoers.d/20-ansible-managed"
    create: true
    state: "present"
    regexp: "linuxbrew ALL="
    line: "linuxbrew ALL=(ALL) NOPASSWD:ALL"
    owner: "root"
    group: "root"
    mode: "440"
    validate: "/usr/sbin/visudo -cf %s"

- name: "sudoers:lineinfile:/etc/sudoers.d/*:disable-requiretty-for-root-user"
  become: true
  lineinfile:
    path: "/etc/sudoers.d/20-ansible-managed"
    create: true
    owner: "root"
    group: "root"
    mode: "440"
    regexp: "^Defaults secure_path="
    line: 'Defaults secure_path="/home/linuxbrew/.linuxbrew/shims:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"'
    validate: "/usr/sbin/visudo -cf %s"

- name: "sudoers:lineinfile:/etc/sudoers.d/*:set-umask"
  become: true
  lineinfile:
    path: "/etc/sudoers.d/20-ansible-managed"
    create: true
    owner: "root"
    group: "root"
    mode: "440"
    regexp: "^Defaults umask="
    line: 'Defaults umask=0002'
    validate: "/usr/sbin/visudo -cf %s"

- name: "sudoers:lineinfile:/etc/sudoers.d/*:force-umask"
  become: true
  lineinfile:
    path: "/etc/sudoers.d/20-ansible-managed"
    create: true
    owner: "root"
    group: "root"
    mode: "440"
    regexp: "^Defaults umask_override"
    line: 'Defaults umask_override'
    validate: "/usr/sbin/visudo -cf %s"

- name: "sudoers:lineinfile:/etc/sudoers.d/*:force-umask"
  become: true
  lineinfile:
    path: "/etc/sudoers.d/20-ansible-managed"
    create: true
    owner: "root"
    group: "root"
    mode: "440"
    regexp: '^Defaults env_keep+="HOMEBREW_'
    line: 'Defaults env_keep+="HOMEBREW_*"'
    validate: "/usr/sbin/visudo -cf %s"

- name: "sudoers:lineinfile:/etc/sudoers.d/*:disable-requiretty-for-root-user"
  become: true
  lineinfile:
    path: "/etc/sudoers.d/20-ansible-managed"
    create: true
    owner: "root"
    group: "root"
    mode: "440"
    regexp: "^Defaults:linuxbrew !?requiretty"
    line: "Defaults:linuxbrew !requiretty"
    validate: "/usr/sbin/visudo -cf %s"

- name: "linuxbrew:user:create"
  become: true
  user:
    name: "linuxbrew"
    create_home: true
    home: '/home/linuxbrew'
    system: true
    uid: 200
    shell: "/bin/false"
    password: "!"
    password_lock: true

- name: "linuxbrew:file:directory:permissions"
  become: true
  file:
    path: "{{ item }}"
    state: "directory"
    owner: "linuxbrew"
    group: "linuxbrew"
    mode: "2770"
  loop:
    - "~linuxbrew"
    - "~linuxbrew/.linuxbrew"
    - "~linuxbrew/.cache"

- name: "linuxbrew:command:get-version"
  command: "brew --version"
  environment:
    PATH: "~linuxbrew/.linuxbrew/bin:{{ ansible_env.PATH }}"
  changed_when: false
  failed_when: false
  register: "linuxbrew_local_version"

- name: "linuxbrew:download&install"
  become: true
  when: "linuxbrew_local_version.rc != 0"
  block:
    - when: "ansible_architecture == 'x86_64'"
      block:
        - name: "linuxbrew:mktemp"
          become_user: "linuxbrew"
          tempfile:
            state: "directory"
            suffix: "linuxbrew"
          register: "linuxbrew_tmp_dir"
        - name: "linuxbrew:get_url:download"
          get_url:
            url: "https://raw.githubusercontent.com/Homebrew/install/master/install.sh"
            dest: "{{ linuxbrew_tmp_dir.path ~ '/linuxbrew.sh' }}"
            owner: "linuxbrew"
            group: "linuxbrew"
            mode: "550"
        - name: "linuxbrew:command:install"
          become_user: "linuxbrew"
          command: "{{ linuxbrew_tmp_dir.path ~ '/linuxbrew.sh' }}"
          environment:
            CI: 1
    - when: "ansible_architecture == 'aarch64'"
      # The official requirements list states a "64-bit x86_64 CPU" is required
      # see: https://github.com/Homebrew/brew/blob/master/docs/Homebrew-on-Linux.md#requirements
      #
      # In order to make linuxbrew work on ARM devices it needs to be manually installed
      # As of 2021-12-12 The installation script throws:
      #
      # > Homebrew on Linux is only supported on Intel processors!
      #
      # linuxbrew CAN be used on ARM devices though:
      # see:
      #
      # > Homebrew can run on 32-bit ARM (Raspberry Pi and others) and 64-bit ARM (AArch64), but no binary packages (bottles) are available.
      # > [..]
      # > You may need to install your own Ruby using your system package manager, a PPA, or rbenv/ruby-build as we no longer distribute a Homebrew Portable Ruby for ARM.
      #
      # The manual installation steps are:
      # see: https://github.com/Linuxbrew/brew#alternative-installation
      #
      # git clone https://github.com/Homebrew/brew ~/.linuxbrew/Homebrew
      # mkdir ~/.linuxbrew/bin
      # ln -s ../Homebrew/bin/brew ~/.linuxbrew/bin
      # eval $(~/.linuxbrew/bin/brew shellenv)
      #
      block:
        - ansible.builtin.git:
            repo: https://github.com/Homebrew/brew.git
            dest: ~linuxbrew/.linuxbrew/Homebrew
            single_branch: yes
            version: master
          environment:
            GIT_TERMINAL_PROMPT: 0
        - become: true
          ansible.builtin.file:
            path: ~linuxbrew/.linuxbrew/Homebrew
            owner: linuxbrew
            group: linuxbrew
            state: directory
            recurse: yes
        - become: true
          ansible.builtin.file:
            path: "~linuxbrew/.linuxbrew/bin"
            state: "directory"
            owner: "linuxbrew"
            group: "linuxbrew"
            mode: "2770"
            recurse: true
        - become: true
          ansible.builtin.file:
            src: "~linuxbrew/.linuxbrew/Homebrew/bin/brew"
            dest: "~linuxbrew/.linuxbrew/bin/brew"
            owner: linuxbrew
            group: linuxbrew
            state: link
        - become: true
          ansible.builtin.apt:
            pkg:
              - "ruby"
            state: 'present'
            update_cache: true
            cache_valid_time: "{{ apt_cache_valid_time | default(3600) }}"

- name: "linuxbrew:template:~linuxbrew/.Brewfile"
  tags:
    - 'linuxbrew[packages]'
  become: true
  template:
    src: "linuxbrew/Brewfile.j2"
    dest: "~linuxbrew/.Brewfile"
    owner: "linuxbrew"
    group: "linuxbrew"

- name: "linuxbrew[packages]"
  tags:
    - 'linuxbrew[packages]'
  become: true
  become_user: "linuxbrew"
  environment:
    PATH: "~linuxbrew/.linuxbrew/bin:{{ ansible_env.PATH }}"
    # Attention: "--global" is not save to use if HOMEBREW_BUNDLE_FILE is set on the remote
    # > Error: 'HOMEBREW_BUNDLE_FILE' cannot be specified with '--global'
    HOMEBREW_BUNDLE_FILE: '/home/linuxbrew/.Brewfile'
  block:
    - name: "linuxbrew:command:brew bundle install ~linuxbrew/.Brewfile"
      command: "~linuxbrew/.linuxbrew/bin/brew bundle install --no-lock"
      register: "linuxbrew_bundle_install"
      until: "linuxbrew_bundle_install is succeeded"
      retries: "{{ ansible_retry_count | int }}"
      delay: "{{ ansible_retry_delay | int }}"

    - name: "linuxbrew:command:brew bundle cleanup --force"
      command: "~linuxbrew/.linuxbrew/bin/brew bundle cleanup --force"

    - name: "linuxbrew:command:brew bundle dump --force"
      command: "~linuxbrew/.linuxbrew/bin/brew bundle dump --force"

    - name: "linuxbrew:command:brew bundle"
      command: "~linuxbrew/.linuxbrew/bin/brew bundle"


- name: "linuxbrew[fix][zsh]"
  become: true
  block:
  - name: "linuxbrew:file:directory:permissions:zsh"
    # warning:  "zsh compinit: insecure directories"
    # solution: remove group write permission on zsh completion dirs
    # example:  chmod go-w '/home/linuxbrew/.linuxbrew/share/zsh'
    # see:      output of "compaudit" command
    # see:      https://stackoverflow.com/a/22753363
    when: "'zsh' in linuxbrew.packages"
    ansible.builtin.file:
      path: "{{ item }}"
      state: "directory"
      owner: "linuxbrew"
      group: "linuxbrew"
      mode: "2750"
      recurse: false
    loop:
      - "~linuxbrew/.linuxbrew/share"
      - "~linuxbrew/.linuxbrew/share/zsh"
      - "~linuxbrew/.linuxbrew/share/zsh/site-functions"
  - name: "linuxbrew:file:directory:permissions:zsh-completions"
    when: "'zsh-completions' in linuxbrew.packages"
    ansible.builtin.file:
      path: "{{ item }}"
      state: "directory"
      owner: "linuxbrew"
      group: "linuxbrew"
      mode: "2750"
      recurse: false
    loop:
      - "~linuxbrew/.linuxbrew/share/zsh-completions"
  - name: "linuxbrew:file:absent:~linuxbrew/.linuxbrew/share/zsh-completions/_console"
    # The _console completion function for "console" and "php console" is broken. Remove it.
    # > console Error in argument 1, char 1: no argument for option -
    ansible.builtin.file:
      path: "~linuxbrew/.linuxbrew/share/zsh-completions/_console"
      state: "absent"

- name: "linuxbrew[fix][docker-compose]"
  become: true
  when: "'docker-compose' in linuxbrew.packages"
  block:
  - name: "linuxbrew:file:directory:/usr/lib/docker/cli-plugins"
    when: "'docker-compose' in linuxbrew.packages"
    ansible.builtin.file:
      path: "/usr/lib/docker/cli-plugins"
      state: "directory"
      owner: "root"
      group: "root"
      mode: "0755"
  - name: "linuxbrew:file:directory:/usr/lib/docker/cli-plugins"
    when: "'docker-compose' in linuxbrew.packages"
    ansible.builtin.file:
      src: "~linuxbrew/.linuxbrew/opt/docker-compose/bin/docker-compose"
      dest: "/usr/lib/docker/cli-plugins/docker-compose"
      state: "link"
      owner: "root"
      group: "root"

- name: "linuxbrew[shim]"
  # Recent versions of Homebrew show the following error if run as root:
  #
  # Error: Running Homebrew as root is extremely dangerous and no longer supported.
  # As Homebrew does not drop privileges on installation you would be giving all
  # build scripts full access to your system.
  #
  # To mitigate the issue we deploy a shim script for the "brew" command.
  #
  # * installed at ~linuxbrew/.linuxbrew/shims/brew
  # * checks if the current user is "linuxbrew"
  # * uses "sudo" to execute the "brew" command as user "linuxbrew"
  #
  become: true
  tags:
    - 'linuxbrew[shim]'
  block:
  - name: "linuxbrew:file:directory:~linuxbrew/.linuxbrew/shims"
    when: "'docker-compose' in linuxbrew.packages"
    ansible.builtin.file:
      path: "~linuxbrew/.linuxbrew/shims"
      state: "directory"
      owner: "root"
      group: "root"
      mode: "0770"
  - name: "linuxbrew:template:~linuxbrew/.linuxbrew/shims/brew"
    template:
      src: "linuxbrew/shims/brew.sh"
      dest: "~linuxbrew/.linuxbrew/shims/brew"
      owner: "linuxbrew"
      group: "linuxbrew"
      mode: "0750"

- name: "linuxbrew:file:absent:~linuxbrew/.linuxbrew/Homebrew/Library/Taps/homebrew/homebrew-{core,bundle}"
  # the taps homebrew/homebrew-{core,bundle} are re-downloaded on the fly if absent
  # in order to save ~600M space in a devcontainer these can be removed after installation
  # todo: extract from linuxbrew.taps variable
  when: "linuxbrew.purge_tap_dirs | bool"
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: "absent"
  loop:
    - "~linuxbrew/.linuxbrew/Homebrew/Library/Taps/homebrew/homebrew-core"
    - "~linuxbrew/.linuxbrew/Homebrew/Library/Taps/homebrew/homebrew-bundle"
